# This file contains the different endpoints your bot can use.

# Server where the models are pulled from.
# https://rasa.com/docs/rasa/user-guide/configuring-http-api/#fetching-models-from-a-server/

#models:
#  url: http://my-server.com/models/default_core@latest
#  wait_time_between_pulls:  10   # [optional](default: 100)

# Server which runs your custom actions.
# https://rasa.com/docs/rasa/core/actions/#custom-actions/

action_endpoint:
  url: "http://localhost:5055/webhook"
# action_endpoint:
#   url: "http://docker-action_server-1:5055/webhook"

# action_endpoint:
#   url: "http://action_server:5055/webhook"
# Tracker store which is used to store the conversations.
# By default the conversations are stored in memory.
# https://rasa.com/docs/rasa/api/tracker-stores/

# if running locally wih shell command - sqlite is probably a good way to start clean
# tracker_store:
#     type: SQL
#     dialect: "sqlite"  # the dialect used to interact with the db
#     url:
#     db: "rasa.db"  # path to your db
#     username:  #
#     password:  #
#     query: # optional dictionary to be added as a query string
#       driver: my-driver

# server based SQL database tracker store connectiing to the conversation logs
# run startsql.sh for connecting to the database via postgresql
# tracker_store:
#   type: SQL
#   dialect: "postgresql"
#   url: ${DB_HOST}
#   port: ${DB_PORT}
#   username: ${DB_USER}
#   password: ${DB_PASSWORD}
#   db: ${DB_DATABASE}
#tracker_store:
#    type: redis
#    url: <host of the redis instance, e.g. localhost>
#    port: <port of your redis instance, usually 6379>
#    db: <number of your database within redis, e.g. 0>
#    password: <password used for authentication>
#    use_ssl: <whether or not the communication is encrypted, default false>

#tracker_store:
#    type: mongod
#    url: <url to your mongo instance, e.g. mongodb://localhost:27017>
#    db: <name of the db within your mongo instance, e.g. rasa>
#    username: <username used for authentication>
#    password: <password used for authentication>

# Event broker which all conversation events should be streamed to.
# https://rasa.com/docs/rasa/api/event-brokers/

#event_broker:
#  url: localhost
#  username: username
#  password: password
#  queue: queue
